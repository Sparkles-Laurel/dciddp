/*
 * DCIDDP
 *
 * The Decentralised Identity Dispatch Protocol (DCIDDP) is a protocol that allows for dispension  of name and pronoun information in a decentralised manner, for rendering in a user interface.  The protocol is designed to be simple, lightweight, and easy to implement.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
)

type DefaultAPI struct {
}

// Post /system
// Create a new plural system
func (api *DefaultAPI) CreateSystem(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /system/:system/fronters
// Retrieves the current fronters' API paths
func (api *DefaultAPI) GetSystemFronters(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /system/:system/fronters
// Set the fronter of a plural system
func (api *DefaultAPI) PutFronters(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /system/:system
// Get plural system information
func (api *DefaultAPI) GetSpecificSystem(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /system/:system/member/:member
// Get member information
func (api *DefaultAPI) GetSystemMember(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /system/:system/member/:member/pronouns
// Get member pronouns
func (api *DefaultAPI) GetMemberPronouns(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Post /system/:system/members
// Add a new member to a plural system
func (api *DefaultAPI) CreateMember(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}
