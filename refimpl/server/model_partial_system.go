/*
DCIDDP

The Decentralised Identity Dispatch Protocol (DCIDDP) is a protocol that allows for dispension  of name and pronoun information in a decentralised manner, for rendering in a user interface.  The protocol is designed to be simple, lightweight, and easy to implement. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PartialSystem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartialSystem{}

// PartialSystem struct for PartialSystem
type PartialSystem struct {
	// The ID of the system
	Id *string `json:"id,omitempty"`
	// The name of the system
	Name *string `json:"name,omitempty"`
}

// NewPartialSystem instantiates a new PartialSystem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartialSystem() *PartialSystem {
	this := PartialSystem{}
	return &this
}

// NewPartialSystemWithDefaults instantiates a new PartialSystem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartialSystemWithDefaults() *PartialSystem {
	this := PartialSystem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PartialSystem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialSystem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PartialSystem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PartialSystem) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PartialSystem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialSystem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PartialSystem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PartialSystem) SetName(v string) {
	o.Name = &v
}

func (o PartialSystem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartialSystem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullablePartialSystem struct {
	value *PartialSystem
	isSet bool
}

func (v NullablePartialSystem) Get() *PartialSystem {
	return v.value
}

func (v *NullablePartialSystem) Set(val *PartialSystem) {
	v.value = val
	v.isSet = true
}

func (v NullablePartialSystem) IsSet() bool {
	return v.isSet
}

func (v *NullablePartialSystem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartialSystem(val *PartialSystem) *NullablePartialSystem {
	return &NullablePartialSystem{value: val, isSet: true}
}

func (v NullablePartialSystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartialSystem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


