/*
DCIDDP

Testing DefaultAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_DefaultAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultAPIService SystemPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.SystemPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SystemSystemFrontersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var system string

		resp, httpRes, err := apiClient.DefaultAPI.SystemSystemFrontersGet(context.Background(), system).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SystemSystemFrontersPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var system string

		httpRes, err := apiClient.DefaultAPI.SystemSystemFrontersPut(context.Background(), system).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SystemSystemGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var system string

		resp, httpRes, err := apiClient.DefaultAPI.SystemSystemGet(context.Background(), system).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SystemSystemMemberMemberGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var system string
		var member string

		resp, httpRes, err := apiClient.DefaultAPI.SystemSystemMemberMemberGet(context.Background(), system, member).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SystemSystemMemberMemberPronounsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var system string
		var member string

		resp, httpRes, err := apiClient.DefaultAPI.SystemSystemMemberMemberPronounsGet(context.Background(), system, member).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SystemSystemMembersPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var system string

		resp, httpRes, err := apiClient.DefaultAPI.SystemSystemMembersPost(context.Background(), system).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
