from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.fronter import Fronter
from openapi_server.models.member import Member
from openapi_server import util

from openapi_server.models.fronter import Fronter  # noqa: E501
from openapi_server.models.member import Member  # noqa: E501

class System(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, pronouns=None, fronters=None, members=None):  # noqa: E501
        """System - a model defined in OpenAPI

        :param id: The id of this System.  # noqa: E501
        :type id: str
        :param name: The name of this System.  # noqa: E501
        :type name: str
        :param pronouns: The pronouns of this System.  # noqa: E501
        :type pronouns: str
        :param fronters: The fronters of this System.  # noqa: E501
        :type fronters: List[Fronter]
        :param members: The members of this System.  # noqa: E501
        :type members: List[Member]
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'pronouns': str,
            'fronters': List[Fronter],
            'members': List[Member]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'pronouns': 'pronouns',
            'fronters': 'fronters',
            'members': 'members'
        }

        self._id = id
        self._name = name
        self._pronouns = pronouns
        self._fronters = fronters
        self._members = members

    @classmethod
    def from_dict(cls, dikt) -> 'System':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The system of this System.  # noqa: E501
        :rtype: System
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this System.

        The ID of the system  # noqa: E501

        :return: The id of this System.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this System.

        The ID of the system  # noqa: E501

        :param id: The id of this System.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this System.

        The name of the system  # noqa: E501

        :return: The name of this System.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this System.

        The name of the system  # noqa: E501

        :param name: The name of this System.
        :type name: str
        """

        self._name = name

    @property
    def pronouns(self) -> str:
        """Gets the pronouns of this System.

        The pronouns of the system  # noqa: E501

        :return: The pronouns of this System.
        :rtype: str
        """
        return self._pronouns

    @pronouns.setter
    def pronouns(self, pronouns: str):
        """Sets the pronouns of this System.

        The pronouns of the system  # noqa: E501

        :param pronouns: The pronouns of this System.
        :type pronouns: str
        """

        self._pronouns = pronouns

    @property
    def fronters(self) -> List[Fronter]:
        """Gets the fronters of this System.

        The current fronter of the system  # noqa: E501

        :return: The fronters of this System.
        :rtype: List[Fronter]
        """
        return self._fronters

    @fronters.setter
    def fronters(self, fronters: List[Fronter]):
        """Sets the fronters of this System.

        The current fronter of the system  # noqa: E501

        :param fronters: The fronters of this System.
        :type fronters: List[Fronter]
        """

        self._fronters = fronters

    @property
    def members(self) -> List[Member]:
        """Gets the members of this System.

        The members of the system  # noqa: E501

        :return: The members of this System.
        :rtype: List[Member]
        """
        return self._members

    @members.setter
    def members(self, members: List[Member]):
        """Sets the members of this System.

        The members of the system  # noqa: E501

        :param members: The members of this System.
        :type members: List[Member]
        """

        self._members = members
