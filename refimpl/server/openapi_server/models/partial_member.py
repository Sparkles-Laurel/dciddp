from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.pronoun import Pronoun
from openapi_server import util

from openapi_server.models.pronoun import Pronoun  # noqa: E501

class PartialMember(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, pronouns=None):  # noqa: E501
        """PartialMember - a model defined in OpenAPI

        :param name: The name of this PartialMember.  # noqa: E501
        :type name: str
        :param pronouns: The pronouns of this PartialMember.  # noqa: E501
        :type pronouns: List[Pronoun]
        """
        self.openapi_types = {
            'name': str,
            'pronouns': List[Pronoun]
        }

        self.attribute_map = {
            'name': 'name',
            'pronouns': 'pronouns'
        }

        self._name = name
        self._pronouns = pronouns

    @classmethod
    def from_dict(cls, dikt) -> 'PartialMember':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The partial-member of this PartialMember.  # noqa: E501
        :rtype: PartialMember
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this PartialMember.

        The name of the member  # noqa: E501

        :return: The name of this PartialMember.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PartialMember.

        The name of the member  # noqa: E501

        :param name: The name of this PartialMember.
        :type name: str
        """

        self._name = name

    @property
    def pronouns(self) -> List[Pronoun]:
        """Gets the pronouns of this PartialMember.


        :return: The pronouns of this PartialMember.
        :rtype: List[Pronoun]
        """
        return self._pronouns

    @pronouns.setter
    def pronouns(self, pronouns: List[Pronoun]):
        """Sets the pronouns of this PartialMember.


        :param pronouns: The pronouns of this PartialMember.
        :type pronouns: List[Pronoun]
        """

        self._pronouns = pronouns
