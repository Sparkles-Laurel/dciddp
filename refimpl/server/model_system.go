/*
DCIDDP

The Decentralised Identity Dispatch Protocol (DCIDDP) is a protocol that allows for dispension  of name and pronoun information in a decentralised manner, for rendering in a user interface.  The protocol is designed to be simple, lightweight, and easy to implement. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the System type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &System{}

// System struct for System
type System struct {
	// The ID of the system
	Id *string `json:"id,omitempty"`
	// The name of the system
	Name *string `json:"name,omitempty"`
	// The pronouns of the system
	Pronouns *string `json:"pronouns,omitempty"`
	// The current fronter of the system
	Fronters []Fronter `json:"fronters,omitempty"`
	// The members of the system
	Members []Member `json:"members,omitempty"`
}

// NewSystem instantiates a new System object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystem() *System {
	this := System{}
	return &this
}

// NewSystemWithDefaults instantiates a new System object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemWithDefaults() *System {
	this := System{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *System) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *System) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *System) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *System) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *System) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *System) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *System) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *System) SetName(v string) {
	o.Name = &v
}

// GetPronouns returns the Pronouns field value if set, zero value otherwise.
func (o *System) GetPronouns() string {
	if o == nil || IsNil(o.Pronouns) {
		var ret string
		return ret
	}
	return *o.Pronouns
}

// GetPronounsOk returns a tuple with the Pronouns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *System) GetPronounsOk() (*string, bool) {
	if o == nil || IsNil(o.Pronouns) {
		return nil, false
	}
	return o.Pronouns, true
}

// HasPronouns returns a boolean if a field has been set.
func (o *System) HasPronouns() bool {
	if o != nil && !IsNil(o.Pronouns) {
		return true
	}

	return false
}

// SetPronouns gets a reference to the given string and assigns it to the Pronouns field.
func (o *System) SetPronouns(v string) {
	o.Pronouns = &v
}

// GetFronters returns the Fronters field value if set, zero value otherwise.
func (o *System) GetFronters() []Fronter {
	if o == nil || IsNil(o.Fronters) {
		var ret []Fronter
		return ret
	}
	return o.Fronters
}

// GetFrontersOk returns a tuple with the Fronters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *System) GetFrontersOk() ([]Fronter, bool) {
	if o == nil || IsNil(o.Fronters) {
		return nil, false
	}
	return o.Fronters, true
}

// HasFronters returns a boolean if a field has been set.
func (o *System) HasFronters() bool {
	if o != nil && !IsNil(o.Fronters) {
		return true
	}

	return false
}

// SetFronters gets a reference to the given []Fronter and assigns it to the Fronters field.
func (o *System) SetFronters(v []Fronter) {
	o.Fronters = v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *System) GetMembers() []Member {
	if o == nil || IsNil(o.Members) {
		var ret []Member
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *System) GetMembersOk() ([]Member, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *System) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []Member and assigns it to the Members field.
func (o *System) SetMembers(v []Member) {
	o.Members = v
}

func (o System) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o System) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Pronouns) {
		toSerialize["pronouns"] = o.Pronouns
	}
	if !IsNil(o.Fronters) {
		toSerialize["fronters"] = o.Fronters
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	return toSerialize, nil
}

type NullableSystem struct {
	value *System
	isSet bool
}

func (v NullableSystem) Get() *System {
	return v.value
}

func (v *NullableSystem) Set(val *System) {
	v.value = val
	v.isSet = true
}

func (v NullableSystem) IsSet() bool {
	return v.isSet
}

func (v *NullableSystem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystem(val *System) *NullableSystem {
	return &NullableSystem{value: val, isSet: true}
}

func (v NullableSystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


